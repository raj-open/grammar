# generated by datamodel-codegen:
#   filename:  config-schema.yaml

from __future__ import annotations

from enum import Enum
from typing import List

from pydantic import BaseModel, Extra, Field


class ProgrammePaths(BaseModel):
    """
    Paths for setup.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    root: str = Field(
        ...,
        description='Path to current package.',
        regex='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*\\.[^\\\\\\/]+$',
    )
    logging: str = Field(
        ...,
        description='Path to file for test logs.',
        regex='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*\\.[^\\\\\\/]+$',
    )


class EnumGrammarLabel(Enum):
    """
    Enumeration of possible options for grammar assets.
    """

    formal_language = 'FORMAL-LANGUAGE'


class ProgrammeAssetGrammar(BaseModel):
    """
    Information about a grammar asset.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    label: EnumGrammarLabel = Field(..., description='label of grammar asset')
    path: str = Field(
        ...,
        description='Path to grammar for formal language.',
        regex='^[^\\\\\\/]+([\\\\\\/][^\\\\\\/]+)*\\.[^\\\\\\/]+$',
    )


class ProgrammeConfig(BaseModel):
    """
    Configuration for programme.
    """

    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    paths: ProgrammePaths
    grammars: List[ProgrammeAssetGrammar]
